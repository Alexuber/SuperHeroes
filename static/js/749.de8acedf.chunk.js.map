{"version":3,"file":"static/js/749.de8acedf.chunk.js","mappings":"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","sources":["components/HeroForm/HeroForm.jsx","pages/AddSuperHeroPage/AddSuperHeroPage.jsx","shared/BackLink/BackLink.jsx"],"sourcesContent":["import React from 'react';\nimport { Button } from '@mui/material';\nimport { Formik, Form, Field, FieldArray, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { addHero, changeHeroById } from 'redux/hero/hero-operations';\nimport { Typography } from '@mui/material';\n\nconst regEx = /^[A-Za-z\\s]+$/;\n\nconst validationSchema = Yup.object({\n  nickname: Yup.string()\n    .min(3, '3 characters minimum')\n    .max(30, '30 characters maximum')\n    .matches(regEx, 'English letters only')\n    .required('Nickname is a required field'),\n  real_name: Yup.string()\n    .min(3, '3 characters minimum')\n    .max(30, '30 characters maximum')\n    .matches(regEx, 'English letters only')\n    .required('Real name is a required field'),\n  origin_description: Yup.string()\n    .min(3, '3 characters minimum')\n    .max(1000, '1000 characters maximum')\n    .required('Description is a required field'),\n  catch_phrase: Yup.string()\n    .min(3, '3 characters minimum')\n    .max(600, '100 characters maximum')\n    .required('Catch phrase is a required field'),\n  superpowers: Yup.array()\n    .of(\n      Yup.string()\n        .min(3, '3 characters minimum')\n        .max(50, '50 characters maximum')\n        .matches(regEx, 'English letters only')\n        .label('Superpower')\n    )\n    .required('Superpowers are required')\n    .min(1, 'Please add at least one superpower'),\n});\n\nconst HeroForm = ({ selectedHero, handleSubmitEditHero }) => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = async (values, form) => {\n    const { images, ...rest } = values;\n    const formData = new FormData();\n\n    for (const file of Object.values(images)) {\n      formData.append('images', file);\n    }\n\n    Object.entries(rest).forEach(([fieldName, fieldValue]) => {\n      formData.append(fieldName, fieldValue);\n    });\n\n    // console.log('FormData contents:');\n    // for (const pair of formData.entries()) {\n    //   console.log(pair[0], pair[1]);\n    // }\n    if (!selectedHero) {\n      if (images.length === 0) {\n        form.setFieldError('images', 'Please select at least one image');\n        return;\n      }\n    }\n\n    for (let i = 0; i < images.length; i++) {\n      const file = images[i];\n      const supportedFormats = ['image/jpg', 'image/jpeg', 'image/png'];\n      if (!supportedFormats.includes(file.type)) {\n        form.setFieldError(\n          'images',\n          'Invalid file format. Only JPG, JPEG, PNG, and WEBP formats are allowed.'\n        );\n        return;\n      }\n    }\n\n    sendHero(formData);\n    form.resetForm();\n  };\n\n  const sendHero = data => {\n    const nickname = data.get('nickname');\n    const real_name = data.get('real_name');\n    const origin_description = data.get('origin_description');\n    const catch_phrase = data.get('catch_phrase');\n    const superpowers = data.get('superpowers').split(',');\n    const images = getFiles(data, 'images');\n\n    const formData = {\n      nickname,\n      real_name,\n      origin_description,\n      catch_phrase,\n      superpowers,\n      images,\n    };\n\n    if (selectedHero) {\n      const id = selectedHero._id;\n\n      dispatch(changeHeroById({ formData, id }));\n      handleSubmitEditHero();\n    } else {\n      dispatch(addHero(formData));\n    }\n  };\n\n  const getFiles = (formData, field) => {\n    const files = [];\n    const fileList = formData.getAll(field);\n\n    for (let i = 0; i < fileList.length; i++) {\n      files.push(fileList[i]);\n    }\n\n    return files;\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        nickname: selectedHero ? selectedHero.nickname : '',\n        real_name: selectedHero ? selectedHero.real_name : '',\n        origin_description: selectedHero ? selectedHero.origin_description : '',\n        catch_phrase: selectedHero ? selectedHero.catch_phrase : '',\n        superpowers: selectedHero ? selectedHero.superpowers : [],\n        images: [],\n      }}\n      validationSchema={validationSchema}\n      onSubmit={handleSubmit}\n    >\n      {({ values, setFieldValue }) => (\n        <Form\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            maxWidth: '400px',\n          }}\n        >\n          {!selectedHero && <Typography>Add new SuperHero!</Typography>}\n          <div style={{ marginBottom: '1rem' }}>\n            <label htmlFor=\"nickname\">Nickname</label>\n            <Field\n              type=\"text\"\n              id=\"nickname\"\n              name=\"nickname\"\n              style={{ width: '100%', padding: '0.5rem' }}\n            />\n            <ErrorMessage\n              name=\"nickname\"\n              component=\"div\"\n              style={{ color: 'red' }}\n            />\n          </div>\n          <div style={{ marginBottom: '1rem' }}>\n            <label htmlFor=\"real_name\">Real Name</label>\n            <Field\n              type=\"text\"\n              id=\"real_name\"\n              name=\"real_name\"\n              style={{ width: '100%', padding: '0.5rem' }}\n            />\n            <ErrorMessage\n              name=\"real_name\"\n              component=\"div\"\n              style={{ color: 'red' }}\n            />\n          </div>\n          <div style={{ marginBottom: '1rem' }}>\n            <label htmlFor=\"origin_description\">Description</label>\n            <Field\n              as=\"textarea\"\n              id=\"origin_description\"\n              name=\"origin_description\"\n              style={{ width: '100%', padding: '0.5rem' }}\n            />\n            <ErrorMessage\n              name=\"origin_description\"\n              component=\"div\"\n              style={{ color: 'red' }}\n            />\n          </div>\n          <div style={{ marginBottom: '1rem' }}>\n            <label htmlFor=\"catch_phrase\">Catch phrase</label>\n            <Field\n              as=\"textarea\"\n              id=\"catch_phrase\"\n              name=\"catch_phrase\"\n              style={{ width: '100%', padding: '0.5rem' }}\n            />\n            <ErrorMessage\n              name=\"catch_phrase\"\n              component=\"div\"\n              style={{ color: 'red' }}\n            />\n          </div>\n\n          <div style={{ marginBottom: '1rem' }}>\n            <label>Superpowers</label>\n            <FieldArray name=\"superpowers\">\n              {({ push, remove, form }) => (\n                <div>\n                  {form.values.superpowers.map((_, index) => (\n                    <div key={index}>\n                      <Field\n                        name={`superpowers[${index}]`}\n                        style={{ width: '100%', padding: '0.5rem' }}\n                      />\n                      {index > 0 && (\n                        <button type=\"button\" onClick={() => remove(index)}>\n                          Remove\n                        </button>\n                      )}\n                    </div>\n                  ))}\n                  <button type=\"button\" onClick={() => push('')}>\n                    Add Superpower\n                  </button>\n                </div>\n              )}\n            </FieldArray>\n            <ErrorMessage\n              name=\"superpowers\"\n              component=\"div\"\n              style={{ color: 'red' }}\n            />\n          </div>\n          <div style={{ marginBottom: '1rem' }}>\n            <label htmlFor=\"images\">Images</label>\n            <input\n              type=\"file\"\n              id=\"images\"\n              name=\"images\"\n              accept=\".jpg, .jpeg, .png, .webp\"\n              multiple\n              onChange={event => {\n                const fileList = Array.from(event.target.files);\n                setFieldValue('images', fileList);\n              }}\n              style={{ padding: '0.5rem' }}\n            />\n            <ErrorMessage\n              name=\"images\"\n              component=\"div\"\n              style={{ color: 'red' }}\n            />\n          </div>\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n            Submit\n          </Button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default HeroForm;\n","import { useLocation } from 'react-router-dom';\nimport BackLink from 'shared/BackLink/BackLink';\nimport { Container } from '@mui/material';\nimport HeroForm from 'components/HeroForm/HeroForm';\n\nconst AddSuperHeroPage = () => {\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/';\n\n  return (\n    <Container maxWidth=\"xl\">\n      <main>\n        <BackLink to={backLinkHref}>Back</BackLink>\n        <HeroForm />\n      </main>\n    </Container>\n  );\n};\n\nexport default AddSuperHeroPage;\n","import { Button } from '@mui/material';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport KeyboardBackspaceRoundedIcon from '@mui/icons-material/KeyboardBackspaceRounded';\n\nconst BackLink = ({ to, children }) => {\n  return (\n    <Button\n      sx={{ marginRight: 'auto', marginBottom: '28px' }}\n      component={Link}\n      to={to}\n      startIcon={<KeyboardBackspaceRoundedIcon />}\n      size=\"small\"\n      color=\"black\"\n      variant=\"backBtn\"\n    >\n      {children}\n    </Button>\n  );\n};\n\nexport default BackLink;\n"],"names":["regEx","validationSchema","Yup","nickname","min","max","matches","required","real_name","origin_description","catch_phrase","superpowers","of","label","selectedHero","handleSubmitEditHero","dispatch","useDispatch","handleSubmit","values","form","images","rest","formData","FormData","Object","file","append","entries","forEach","fieldName","fieldValue","length","setFieldError","i","includes","type","sendHero","resetForm","data","get","split","getFiles","id","_id","changeHeroById","addHero","field","files","fileList","getAll","push","initialValues","onSubmit","setFieldValue","style","display","flexDirection","maxWidth","marginBottom","htmlFor","name","width","padding","component","color","as","remove","map","_","index","onClick","accept","multiple","onChange","event","Array","from","target","variant","backLinkHref","useLocation","state","to","children","sx","marginRight","Link","startIcon","size"],"sourceRoot":""}